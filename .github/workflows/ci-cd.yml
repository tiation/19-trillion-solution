name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

# Security: Restrict permissions
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  NODE_VERSION: '18'
  CACHE_KEY: node-modules-${{ hashFiles('**/package-lock.json') }}

jobs:
  # ====================================
  # Code Quality & Security Checks
  # ====================================
  lint-and-test:
    name: Lint, Test & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript type checking
      run: npm run type-check
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run Prettier check
      run: npm run format:check
    
    - name: Run tests
      run: npm run test:coverage
    
    - name: Upload test coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
    
    - name: Security audit
      run: npm audit --audit-level=high
    
    - name: Check for vulnerable dependencies
      run: |
        npm install -g npm-check-updates
        ncu --doctor --fail 2>&1 | tee dependency-check.log
        if grep -q "FAILED" dependency-check.log; then
          echo "::warning::Some dependencies may have security issues"
        fi

  # ====================================
  # Build Application
  # ====================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        VITE_NODE_ENV: production
        VITE_APP_VERSION: ${{ github.sha }}
        VITE_BUILD_DATE: ${{ github.event.head_commit.timestamp }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 30
    
    - name: Analyze bundle size
      run: |
        npm install -g bundlephobia-cli
        echo "## Bundle Analysis" >> $GITHUB_STEP_SUMMARY
        find dist -name "*.js" -exec echo "### {}" \; -exec ls -lh {} \; >> $GITHUB_STEP_SUMMARY

  # ====================================
  # Security Scanning
  # ====================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      if: github.event_name == 'pull_request'
      with:
        target: 'https://tiation.github.io/19-trillion-solution/'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # ====================================
  # Deploy to GitHub Pages
  # ====================================
  deploy:
    name: Deploy to GitHub Pages
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [lint-and-test, build, security-scan]
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Update deployment status
      if: always()
      run: |
        echo "Deployment Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "Deployment URL: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        echo "Build SHA: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "Build Date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_STEP_SUMMARY

  # ====================================
  # Performance Testing
  # ====================================
  performance-test:
    name: Performance Testing
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: https://tiation.github.io/19-trillion-solution/
        configPath: '.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
    
    - name: Web Vitals check
      run: |
        npm install -g web-vitals-cli
        web-vitals https://tiation.github.io/19-trillion-solution/ --output json > web-vitals.json
        cat web-vitals.json

  # ====================================
  # Accessibility Testing
  # ====================================
  accessibility-test:
    name: Accessibility Testing
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run axe accessibility tests
      uses: chrisdickinson/setup-yq@latest
    
    - name: Install axe-core/cli
      run: npm install -g @axe-core/cli
    
    - name: Run accessibility scan
      run: |
        axe https://tiation.github.io/19-trillion-solution/ \
          --stdout \
          --rules color-contrast,keyboard-navigation,aria-labels \
          --reporter json > accessibility-results.json
        
        # Check if any violations were found
        if [ $(jq '.violations | length' accessibility-results.json) -gt 0 ]; then
          echo "::warning::Accessibility violations found"
          jq '.violations[] | .description' accessibility-results.json
        else
          echo "::notice::No accessibility violations found"
        fi

  # ====================================
  # Notification
  # ====================================
  notify:
    name: Notification
    if: always()
    runs-on: ubuntu-latest
    needs: [lint-and-test, build, security-scan, deploy]
    
    steps:
    - name: Workflow Status Summary
      run: |
        echo "# ðŸš€ The \$19 Trillion Solution - CI/CD Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Repository**: Tiation & ChaseWhiteRabbit Initiative" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Job Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Lint & Test**: ${{ needs.lint-and-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy**: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*This workflow ensures enterprise-grade quality and security for our economic reform initiative.*" >> $GITHUB_STEP_SUMMARY
